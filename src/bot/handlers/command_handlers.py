import logging
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
import os
from src.utils.exporters.chat_exporter import ChatExporter

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    logger.info(f"User {user.id} started the bot")
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù /export <username> - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n"
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /export –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "–∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìù /export <username> - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "/export username\n\n"
        "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏, "
        "–≤–∫–ª—é—á–∞—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏–π."
    )

async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the /export command."""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ü—Ä–∏–º–µ—Ä: /export username"
        )
        return

    username = context.args[0].lstrip('@')
    user = update.effective_user
    
    try:
        # Send initial response
        status_message = await update.message.reply_text(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ —Å @{username}...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # Get chat exporter from context
        chat_exporter = context.bot_data.get('chat_exporter')
        if not chat_exporter:
            chat_exporter = ChatExporter(context.bot)
            context.bot_data['chat_exporter'] = chat_exporter
        
        # Export chat
        filepath = await chat_exporter.export_chat(user.id, username)
        
        if filepath and os.path.exists(filepath):
            # Send the file
            with open(filepath, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=os.path.basename(filepath),
                    caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞ —Å @{username} –∑–∞–≤–µ—Ä—à–µ–Ω!"
                )
            
            # Clean up the file
            os.remove(filepath)
            
            # Update status message
            await status_message.delete()
        else:
            await status_message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å @{username}.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                "2. –£ –≤–∞—Å –µ—Å—Ç—å –æ–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
                "3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
            )
        
    except Exception as e:
        logger.error(f"Error during export for user {user.id}: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —á–∞—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        ) 